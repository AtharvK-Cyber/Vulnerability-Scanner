import socket
import ssl
import requests
import json
import nmap
from concurrent.futures import ThreadPoolExecutor, as_completed
from collections import defaultdict

# List of commonly used ports to scan
COMMON_PORTS = [21, 22, 23, 25, 53, 80, 443, 3306, 5432, 6379, 27017, 11211, 9200]

# Example of known vulnerabilities
KNOWN_VULNERABILITIES = {
    # Define known vulnerabilities
}

def scan_port(ip, port):
    """Scan a single port and detect service/version."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(3)
    result = {'port': port, 'status': 'Closed', 'service': 'Unknown', 'version': 'Unknown'}

    try:
        sock.connect((ip, port))
        request = f'HEAD / HTTP/1.1\r\nHost: {ip}\r\n\r\n'
        sock.sendall(request.encode())
        banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
        
        result['status'] = 'Open'
        result['version'] = banner.split('\n')[0] if banner else 'Unknown'
        result['service'] = detect_service(banner)

    except socket.timeout:
        result['status'] = 'Timed Out'
    except socket.error:
        result['status'] = 'Closed'
    finally:
        sock.close()
    
    return result

def detect_service(banner):
    """Detect service based on banner."""
    # Implement service detection logic here
    return 'Unknown'

def scan_ports(ip, ports):
    """Scan multiple ports on a given IP and detect services."""
    results = defaultdict(dict)
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(scan_port, ip, port): port for port in ports}
        for future in as_completed(futures):
            port = futures[future]
            results[port] = future.result()
    return results

def check_vulnerabilities(port, service, version):
    """Check for known vulnerabilities based on service and version."""
    vulnerabilities = KNOWN_VULNERABILITIES.get(str(port), [])
    for vuln in vulnerabilities:
        if service in vuln or version in vuln:
            return vuln
    return 'No known vulnerabilities'

def analyze_ssl_certificate(ip, port):
    """Analyze the SSL/TLS certificate for HTTPS ports."""
    context = ssl.create_default_context()
    try:
        with socket.create_connection((ip, port)) as sock:
            with context.wrap_socket(sock, server_hostname=ip) as ssock:
                cert = ssock.getpeercert()
                return cert
    except Exception as e:
        return f"SSL/TLS Error: {str(e)}"

def analyze_http_headers(ip, port):
    """Analyze HTTP headers for web services."""
    try:
        response = requests.get(f"http://{ip}:{port}", timeout=5)
        return response.headers
    except requests.RequestException as e:
        return f"HTTP Request Error: {str(e)}"

def analyze_http_methods(ip, port):
    """Analyze allowed HTTP methods."""
    try:
        response = requests.options(f"http://{ip}:{port}", timeout=5)
        return response.headers.get('Allow', 'No Allow header found')
    except requests.RequestException as e:
        return f"HTTP Request Error: {str(e)}"

def generate_html_report(results):
    """Generate a professional HTML report."""
    html = """
    <html>
    <head>
        <title>Vulnerability Scan Report</title>
        <style>
            body { font-family: Arial, sans-serif; }
            h1 { color: #333; }
            table { width: 100%; border-collapse: collapse; }
            table, th, td { border: 1px solid #ddd; }
            th, td { padding: 8px; text-align: left; }
            th { background-color: #f4f4f4; }
            .status-open { color: green; }
            .status-closed { color: red; }
        </style>
    </head>
    <body>
        <h1>Vulnerability Scan Report</h1>
        <table>
            <thead>
                <tr>
                    <th>Port</th>
                    <th>Status</th>
                    <th>Service</th>
                    <th>Version</th>
                    <th>Vulnerabilities</th>
                </tr>
            </thead>
            <tbody>
    """

    for port, data in results.items():
        status_class = 'status-open' if data['status'] == 'Open' else 'status-closed'
        vulnerabilities = check_vulnerabilities(port, data['service'], data['version'])
        html += f"""
            <tr>
                <td>{port}</td>
                <td class="{status_class}">{data['status']}</td>
                <td>{data['service']}</td>
                <td>{data['version']}</td>
                <td>{vulnerabilities}</td>
            </tr>
        """

    html += """
            </tbody>
        </table>
    </body>
    </html>
    """

    with open('scan_report.html', 'w') as f:
        f.write(html)

def run_nmap_scan(ip):
    """Run an nmap scan for detailed service detection."""
    nm = nmap.PortScanner()
    nm.scan(ip, arguments='-sV')
    return nm.csv()

def main():
    target = input("Enter the IP address or domain to scan: ").strip()
    
    if not target:
        print("Invalid input. Exiting.")
        return
    
    print(f"Scanning {target}...")
    scan_results = scan_ports(target, COMMON_PORTS)
    
    open_ports = {port: data for port, data in scan_results.items() if data['status'] == 'Open'}
    
    if open_ports:
        generate_html_report(scan_results)
        print("Scan complete. Report generated as 'scan_report.html'.")
    else:
        print("No open ports found.")
    
    # Run Nmap scan for detailed detection
    nmap_report = run_nmap_scan(target)
    print(f"Nmap Scan Report:\n{nmap_report}")

if __name__ == "__main__":
    main()

